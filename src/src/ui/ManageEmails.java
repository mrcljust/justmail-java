package src.ui;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import src.JustMail;

public class ManageEmails extends javax.swing.JDialog
{

    private final JTree tree;
    public String curProt = "";
    public String curSelMail = "";
    private Properties loadedProps = null;

    public ManageEmails()
    {
        super((JFrame) null, "Kontenverwaltung - justMail", true);
        Image image = Toolkit.getDefaultToolkit().getImage("src/img/icon.png");
        this.setIconImage(image);
        initComponents();
        tree = new JTree();
        this.setLocationRelativeTo(null);
        jTabbedPane1.setVisible(false);
        txtPortPI.setDocument(new JTextFieldLimit(4));
        txtSmtpPort.setDocument(new JTextFieldLimit(4));
        tree.setRootVisible(false);
        TreeSelectionListener l = new TreeSelectionListener()
        {
            @Override
            public void valueChanged(TreeSelectionEvent e)
            {
                handleTreeSelectionChange();
            }
        };
        tree.addTreeSelectionListener(l);
        pnlTree.add(tree);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        buildTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tabMain = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtMail = new javax.swing.JTextField();
        btnEditMail = new javax.swing.JButton();
        btnEditPw = new javax.swing.JButton();
        txtPw = new javax.swing.JPasswordField();
        txtName = new javax.swing.JTextField();
        btnEditName = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnRemoveEmail = new javax.swing.JButton();
        tabPopImap = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtServerPI = new javax.swing.JTextField();
        txtPortPI = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnEditPIServer = new javax.swing.JButton();
        btnEditPIPort = new javax.swing.JButton();
        rbPop = new javax.swing.JRadioButton();
        rbImap = new javax.swing.JRadioButton();
        btnEditProtocol = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cbCheckMailsAtProgramStart = new javax.swing.JCheckBox();
        btnEditCheckMailsAtProgramStart = new javax.swing.JToggleButton();
        tabSmtp = new javax.swing.JPanel();
        btnEditSmtpServer = new javax.swing.JButton();
        btnEditSmtpPort = new javax.swing.JButton();
        txtSmtpServer = new javax.swing.JTextField();
        txtSmtpPort = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        pnlTree = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setEnabled(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(0, 0));

        jLabel3.setText("E-Mail-Adresse:");

        jLabel4.setText("Passwort:");

        txtMail.setText("...");
        txtMail.setEnabled(false);

        btnEditMail.setText("E");
        btnEditMail.setEnabled(false);

        btnEditPw.setText("E");
        btnEditPw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPwActionPerformed(evt);
            }
        });

        txtPw.setText("...");
        txtPw.setEnabled(false);

        txtName.setText("...");
        txtName.setEnabled(false);

        btnEditName.setText("E");
        btnEditName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditNameActionPerformed(evt);
            }
        });

        jLabel7.setText("Anzeigename:");

        btnRemoveEmail.setText("Konto entfernen");
        btnRemoveEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEmailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabMainLayout = new javax.swing.GroupLayout(tabMain);
        tabMain.setLayout(tabMainLayout);
        tabMainLayout.setHorizontalGroup(
            tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabMainLayout.createSequentialGroup()
                        .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabMainLayout.createSequentialGroup()
                                .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMail)
                                    .addComponent(txtPw, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnEditMail, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnEditPw, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabMainLayout.createSequentialGroup()
                                .addComponent(txtName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEditName))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabMainLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRemoveEmail)))
                .addContainerGap())
        );
        tabMainLayout.setVerticalGroup(
            tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditMail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditPw)
                    .addComponent(jLabel4)
                    .addComponent(txtPw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(btnRemoveEmail)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Allgemein", tabMain);

        jLabel1.setText("POP-Server:");

        txtServerPI.setText("...");
        txtServerPI.setEnabled(false);

        txtPortPI.setText("...");
        txtPortPI.setEnabled(false);

        jLabel2.setText("POP-Port:");

        btnEditPIServer.setText("E");
        btnEditPIServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPIServerActionPerformed(evt);
            }
        });

        btnEditPIPort.setText("E");
        btnEditPIPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPIPortActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbPop);
        rbPop.setText("POP");
        rbPop.setEnabled(false);

        buttonGroup1.add(rbImap);
        rbImap.setText("IMAP");
        rbImap.setEnabled(false);

        btnEditProtocol.setText("E");
        btnEditProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditProtocolActionPerformed(evt);
            }
        });

        jLabel8.setText("Protokoll:");

        cbCheckMailsAtProgramStart.setText("<html>Bei Programmstart automatisch<br>auf neue E-Mails prüfen</html>");
        cbCheckMailsAtProgramStart.setEnabled(false);

        btnEditCheckMailsAtProgramStart.setText("E");
        btnEditCheckMailsAtProgramStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCheckMailsAtProgramStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabPopImapLayout = new javax.swing.GroupLayout(tabPopImap);
        tabPopImap.setLayout(tabPopImapLayout);
        tabPopImapLayout.setHorizontalGroup(
            tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabPopImapLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabPopImapLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbPop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbImap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditProtocol)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabPopImapLayout.createSequentialGroup()
                        .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(tabPopImapLayout.createSequentialGroup()
                                .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtServerPI, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                    .addComponent(txtPortPI)))
                            .addComponent(cbCheckMailsAtProgramStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnEditPIServer, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnEditPIPort, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(btnEditCheckMailsAtProgramStart, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        tabPopImapLayout.setVerticalGroup(
            tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabPopImapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtServerPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditPIServer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditPIPort)
                    .addComponent(txtPortPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditCheckMailsAtProgramStart)
                    .addComponent(cbCheckMailsAtProgramStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(tabPopImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditProtocol)
                    .addComponent(rbImap)
                    .addComponent(rbPop)
                    .addComponent(jLabel8))
                .addContainerGap())
        );

        jTabbedPane1.addTab("POP", tabPopImap);

        btnEditSmtpServer.setText("E");
        btnEditSmtpServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditSmtpServerActionPerformed(evt);
            }
        });

        btnEditSmtpPort.setText("E");
        btnEditSmtpPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditSmtpPortActionPerformed(evt);
            }
        });

        txtSmtpServer.setText("...");
        txtSmtpServer.setEnabled(false);

        txtSmtpPort.setText("...");
        txtSmtpPort.setEnabled(false);

        jLabel5.setText("SMTP-Server:");

        jLabel6.setText("SMTP-Port:");

        javax.swing.GroupLayout tabSmtpLayout = new javax.swing.GroupLayout(tabSmtp);
        tabSmtp.setLayout(tabSmtpLayout);
        tabSmtpLayout.setHorizontalGroup(
            tabSmtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabSmtpLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tabSmtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabSmtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabSmtpLayout.createSequentialGroup()
                        .addComponent(txtSmtpServer, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditSmtpServer))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabSmtpLayout.createSequentialGroup()
                        .addComponent(txtSmtpPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditSmtpPort)))
                .addContainerGap())
        );
        tabSmtpLayout.setVerticalGroup(
            tabSmtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabSmtpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabSmtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditSmtpServer)
                    .addComponent(txtSmtpServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabSmtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditSmtpPort)
                    .addComponent(txtSmtpPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(154, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SMTP", tabSmtp);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jScrollPane1.setViewportView(jPanel1);

        jSplitPane1.setRightComponent(jScrollPane1);

        jSplitPane2.setDividerLocation(223);
        jSplitPane2.setDividerSize(0);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setEnabled(false);

        pnlTree.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setTopComponent(pnlTree);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Konto hinzufügen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jSplitPane2.setRightComponent(jPanel2);

        jSplitPane1.setLeftComponent(jSplitPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buildTree()
    {
        File dir = new File(System.getProperty("user.dir") + "/mailaccounts/");

        String[] mailAccounts = dir.list();
        if (mailAccounts == null)
        {
            System.exit(0);
        }
        else
        {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");
            for (int i = 0; i < mailAccounts.length; i++)
            {
                String filename = mailAccounts[i];
                DefaultMutableTreeNode mailAdr = new DefaultMutableTreeNode(filename);
                root.insert(mailAdr, i);
            }
            tree.setModel(new DefaultTreeModel(root));

            for (int i = 0; i < tree.getRowCount(); i++)
            {
                tree.expandRow(i);
            }
            tree.addSelectionRow(0);
        }
    }

    private void handleTreeSelectionChange()
    {
        File dir = new File(System.getProperty("user.dir") + "/mailaccounts/");
        if (tree.getSelectionCount() > 0)
        {
            resetTabPane();
            CConfig cfg = new CConfig();
            try
            {
                String curMail = tree.getLastSelectedPathComponent().toString();
                Properties props = cfg.loadConfig(dir.getAbsolutePath() + "/" + curMail);
                loadedProps = props;
                curSelMail = curMail;
                String protocol = props.getProperty("PROTOCOL");
                curProt = protocol;
                jLabel1.setText(protocol + "-Server:");
                jLabel2.setText(protocol + "-Port:");
                txtMail.setText(curMail);
                txtPw.setText(props.getProperty("MAIL_PW"));
                txtName.setText(props.getProperty("NAME"));
                txtServerPI.setText(props.getProperty("INBOX_SERVER"));
                txtPortPI.setText(props.getProperty("INBOX_PORT"));
                txtSmtpServer.setText(props.getProperty("SMTP_SERVER"));
                txtSmtpPort.setText(props.getProperty("SMTP_PORT"));
                cbCheckMailsAtProgramStart.setSelected(Boolean.valueOf(props.getProperty("MAILS_AT_START")));
                jTabbedPane1.setTitleAt(1, protocol);
                if (protocol.contains("POP"))
                {
                    rbPop.setSelected(true);
                }
                if (protocol.contains("IMAP"))
                {
                    rbImap.setSelected(true);
                }
                jTabbedPane1.setVisible(true);
            }
            catch (Exception ex)
            {
                Logger.getLogger(WriteEmail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            jTabbedPane1.setVisible(false);
            curSelMail = "";
        }
    }

    private void btnEditPwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPwActionPerformed
        if (btnEditPw.getText().equals("E"))
        {
            txtPw.setEnabled(true);
            btnEditPw.setText("S");
        }
        else if (btnEditPw.getText().equals("S"))
        {
            if (!String.valueOf(txtPw.getPassword()).equals(""))
            {
                File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail);
                File configFile = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/config.cfg");
                int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie das Passwort wirklich ändern?", "Passwort ändern?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (dialogResult == JOptionPane.YES_OPTION)
                {
                    CConfig cfg = new CConfig();
                    configFile.delete();
                    try
                    {
                        cfg.createConfig(dir.getAbsolutePath() + "/", curProt, loadedProps.getProperty("INBOX_SERVER"), loadedProps.getProperty("INBOX_PORT"), loadedProps.getProperty("SMTP_SERVER"), loadedProps.getProperty("SMTP_PORT"), loadedProps.getProperty("NAME"), loadedProps.getProperty("MAIL_ADR"), String.valueOf(txtPw.getPassword()), Boolean.valueOf(loadedProps.getProperty("MAILS_AT_START")));
                        loadedProps = cfg.loadConfig(dir.getAbsolutePath() + "/");
                    }
                    catch (Exception ex)
                    {
                        Logger.getLogger(ManageEmails.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                {
                    //nein selektiert
                }
                txtPw.setEnabled(false);
                btnEditPw.setText("E");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Bitte tragen Sie ein Passwort ein", "Meldung", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEditPwActionPerformed

    private void btnEditPIServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPIServerActionPerformed
        if (btnEditPIServer.getText().equals("E"))
        {
            txtServerPI.setEnabled(true);
            btnEditPIServer.setText("S");
        }
        else if (btnEditPIServer.getText().equals("S"))
        {
            if (!txtServerPI.getText().trim().equals(""))
            {
                File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail);
                File configFile = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/config.cfg");
                int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie den " + curProt + "-Server wirklich ändern?", curProt + "-Server ändern?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (dialogResult == JOptionPane.YES_OPTION)
                {
                    CConfig cfg = new CConfig();
                    configFile.delete();
                    try
                    {
                        cfg.createConfig(dir.getAbsolutePath() + "/", curProt, txtServerPI.getText(), loadedProps.getProperty("INBOX_PORT"), loadedProps.getProperty("SMTP_SERVER"), loadedProps.getProperty("SMTP_PORT"), loadedProps.getProperty("NAME"), loadedProps.getProperty("MAIL_ADR"), loadedProps.getProperty("MAIL_PW"), Boolean.valueOf(loadedProps.getProperty("MAILS_AT_START")));
                        loadedProps = cfg.loadConfig(dir.getAbsolutePath() + "/");
                    }
                    catch (Exception ex)
                    {
                        Logger.getLogger(ManageEmails.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                {
                    //nein selektiert
                }
                txtServerPI.setEnabled(false);
                btnEditPIServer.setText("E");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Bitte tragen Sie einen " + curProt + "-Server ein", "Meldung", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnEditPIServerActionPerformed

    private void btnEditPIPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPIPortActionPerformed
        if (btnEditPIPort.getText().equals("E"))
        {
            txtPortPI.setEnabled(true);
            btnEditPIPort.setText("S");
        }
        else if (btnEditPIPort.getText().equals("S"))
        {
            if (!txtPortPI.getText().trim().equals(""))
            {
                File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail);
                File configFile = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/config.cfg");
                int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie den " + curProt + "-Port wirklich ändern?", curProt + "-Port ändern?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (dialogResult == JOptionPane.YES_OPTION)
                {
                    CConfig cfg = new CConfig();
                    configFile.delete();
                    try
                    {
                        cfg.createConfig(dir.getAbsolutePath() + "/", curProt, loadedProps.getProperty("INBOX_SERVER"), txtPortPI.getText(), loadedProps.getProperty("SMTP_SERVER"), loadedProps.getProperty("SMTP_PORT"), loadedProps.getProperty("NAME"), loadedProps.getProperty("MAIL_ADR"), loadedProps.getProperty("MAIL_PW"), Boolean.valueOf(loadedProps.getProperty("MAILS_AT_START")));
                        loadedProps = cfg.loadConfig(dir.getAbsolutePath() + "/");
                    }
                    catch (Exception ex)
                    {
                        Logger.getLogger(ManageEmails.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                {
                    //nein selektiert
                }
                txtPortPI.setEnabled(false);
                btnEditPIPort.setText("E");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Bitte tragen Sie einen " + curProt + "-Port ein", "Meldung", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnEditPIPortActionPerformed

    private void btnEditSmtpServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditSmtpServerActionPerformed
        if (btnEditSmtpServer.getText().equals("E"))
        {
            txtSmtpServer.setEnabled(true);
            btnEditSmtpServer.setText("S");
        }
        else if (btnEditSmtpServer.getText().equals("S"))
        {
            if (!txtSmtpServer.getText().trim().equals(""))
            {
                File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail);
                File configFile = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/config.cfg");
                int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie den SMTP-Server wirklich ändern?", "SMTP-Server ändern?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (dialogResult == JOptionPane.YES_OPTION)
                {
                    CConfig cfg = new CConfig();
                    configFile.delete();
                    try
                    {
                        cfg.createConfig(dir.getAbsolutePath() + "/", curProt, loadedProps.getProperty("INBOX_SERVER"), loadedProps.getProperty("INBOX_PORT"), txtSmtpServer.getText(), loadedProps.getProperty("SMTP_PORT"), loadedProps.getProperty("NAME"), loadedProps.getProperty("MAIL_ADR"), loadedProps.getProperty("MAIL_PW"), Boolean.valueOf(loadedProps.getProperty("MAILS_AT_START")));
                        loadedProps = cfg.loadConfig(dir.getAbsolutePath() + "/");
                    }
                    catch (Exception ex)
                    {
                        Logger.getLogger(ManageEmails.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                {
                    //nein selektiert
                }
                txtSmtpServer.setEnabled(false);
                btnEditSmtpServer.setText("E");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Bitte tragen Sie einen SMTP-Server ein", "Meldung", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnEditSmtpServerActionPerformed

    private void btnEditSmtpPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditSmtpPortActionPerformed
        if (btnEditSmtpPort.getText().equals("E"))
        {
            txtSmtpPort.setEnabled(true);
            btnEditSmtpPort.setText("S");
        }
        else if (btnEditSmtpPort.getText().equals("S"))
        {
            if (!txtSmtpPort.getText().trim().equals(""))
            {
                File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail);
                File configFile = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/config.cfg");
                int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie den SMTP-Port wirklich ändern?", "SMTP-Port ändern?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (dialogResult == JOptionPane.YES_OPTION)
                {
                    CConfig cfg = new CConfig();
                    configFile.delete();
                    try
                    {
                        cfg.createConfig(dir.getAbsolutePath() + "/", curProt, loadedProps.getProperty("INBOX_SERVER"), loadedProps.getProperty("INBOX_PORT"), loadedProps.getProperty("SMTP_SERVER"), txtSmtpPort.getText(), loadedProps.getProperty("NAME"), loadedProps.getProperty("MAIL_ADR"), loadedProps.getProperty("MAIL_PW"), Boolean.valueOf(loadedProps.getProperty("MAILS_AT_START")));
                        loadedProps = cfg.loadConfig(dir.getAbsolutePath() + "/");
                    }
                    catch (Exception ex)
                    {
                        Logger.getLogger(ManageEmails.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                {
                    //nein selektiert
                }
                txtSmtpPort.setEnabled(false);
                btnEditSmtpPort.setText("E");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Bitte tragen Sie einen SMTP-Port ein", "Meldung", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnEditSmtpPortActionPerformed

    private void btnEditNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditNameActionPerformed
        if (btnEditName.getText().equals("E"))
        {
            txtName.setEnabled(true);
            btnEditName.setText("S");
        }
        else if (btnEditName.getText().equals("S"))
        {
            if (!txtName.getText().trim().equals(""))
            {
                File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail);
                File configFile = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/config.cfg");
                int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie den Anzeigenamen wirklich ändern?", "Anzeigename ändern?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (dialogResult == JOptionPane.YES_OPTION)
                {
                    CConfig cfg = new CConfig();
                    configFile.delete();
                    try
                    {
                        cfg.createConfig(dir.getAbsolutePath() + "/", curProt, loadedProps.getProperty("INBOX_SERVER"), loadedProps.getProperty("INBOX_PORT"), loadedProps.getProperty("SMTP_SERVER"), loadedProps.getProperty("SMTP_PORT"), txtName.getText(), loadedProps.getProperty("MAIL_ADR"), loadedProps.getProperty("MAIL_PW"), Boolean.valueOf(loadedProps.getProperty("MAILS_AT_START")));
                        loadedProps = cfg.loadConfig(dir.getAbsolutePath() + "/");
                    }
                    catch (Exception ex)
                    {
                        Logger.getLogger(ManageEmails.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                {
                    //nein selektiert
                }
                txtName.setEnabled(false);
                btnEditName.setText("E");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Bitte tragen Sie einen Anzeigenamen ein", "Meldung", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnEditNameActionPerformed

    private void resetTabPane()
    {
        btnEditMail.setText("E");
        btnEditName.setText("E");
        btnEditPw.setText("E");
        btnEditPIServer.setText("E");
        btnEditPIPort.setText("E");
        btnEditSmtpServer.setText("E");
        btnEditSmtpPort.setText("E");
        btnEditCheckMailsAtProgramStart.setText("E");
        btnEditPIServer.setText("E");

        txtMail.setEnabled(false);
        txtPw.setEnabled(false);
        txtName.setEnabled(false);
        txtServerPI.setEnabled(false);
        txtPortPI.setEnabled(false);
        txtSmtpServer.setEnabled(false);
        txtSmtpPort.setEnabled(false);
        cbCheckMailsAtProgramStart.setEnabled(false);
        rbPop.setEnabled(false);
        rbImap.setEnabled(false);

    }

    private void btnEditProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditProtocolActionPerformed
        if (btnEditProtocol.getText().equals("E"))
        {
            rbPop.setEnabled(true);
            rbImap.setEnabled(true);
            btnEditProtocol.setText("S");
        }
        else if (btnEditProtocol.getText().equals("S"))
        {
            File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail);
            File configFile = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/config.cfg");
            int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie das Protokoll wirklich ändern?", "Protokoll ändern?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION)
            {
                CConfig cfg = new CConfig();
                configFile.delete();
                if (rbPop.isSelected())
                {
                    curProt = "POP";
                }
                jTabbedPane1.setTitleAt(1, "POP");
                if (rbImap.isSelected())
                {
                    curProt = "IMAP";
                }
                jTabbedPane1.setTitleAt(1, "IMAP");
                try
                {
                    cfg.createConfig(dir.getAbsolutePath() + "/", curProt, loadedProps.getProperty("INBOX_SERVER"), loadedProps.getProperty("INBOX_PORT"), loadedProps.getProperty("SMTP_SERVER"), loadedProps.getProperty("SMTP_PORT"), loadedProps.getProperty("NAME"), loadedProps.getProperty("MAIL_ADR"), loadedProps.getProperty("MAIL_PW"), Boolean.valueOf(loadedProps.getProperty("MAILS_AT_START")));
                    loadedProps = cfg.loadConfig(dir.getAbsolutePath() + "/");
                }
                catch (Exception ex)
                {
                    Logger.getLogger(ManageEmails.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                //nein selektiert
            }
            rbPop.setEnabled(false);
            rbImap.setEnabled(false);
            btnEditProtocol.setText("E");
        }
    }//GEN-LAST:event_btnEditProtocolActionPerformed

    private boolean delDir(File dir)
    {
        if (dir.isDirectory())
        {
            String[] entries = dir.list();
            for (int x = 0; x < entries.length; x++)
            {
                File aktFile = new File(dir.getPath(), entries[x]);
                delDir(aktFile);
            }
            if (dir.delete())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            if (dir.delete())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    private void btnRemoveEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEmailActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie das E-Mail Konto wirklich entfernen?", "E-Mail Konto entfernen?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (dialogResult == JOptionPane.YES_OPTION)
        {
            File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/");
            boolean dirDeleted = delDir(dir);
            if (dirDeleted = true)
            {
                buildTree();
                JustMail.mainForm.mainMailPnl.refreshTree();
                JustMail.mainForm.listMailaccountsToCombobox();
            }
        }
        else
        {
            //nein selektiert
        }
    }//GEN-LAST:event_btnRemoveEmailActionPerformed

    private void btnEditCheckMailsAtProgramStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCheckMailsAtProgramStartActionPerformed
        if (btnEditCheckMailsAtProgramStart.getText().equals("E"))
        {
            cbCheckMailsAtProgramStart.setEnabled(true);
            btnEditCheckMailsAtProgramStart.setText("S");
        }
        else if (btnEditCheckMailsAtProgramStart.getText().equals("S"))
        {
            File dir = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail);
            File configFile = new File(System.getProperty("user.dir") + "/mailaccounts/" + curSelMail + "/config.cfg");
            int dialogResult = JOptionPane.showConfirmDialog(null, "Möchten Sie diese Einstellung wirklich ändern?", "Einstellung ändern?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION)
            {
                CConfig cfg = new CConfig();
                configFile.delete();
                try
                {
                    cfg.createConfig(dir.getAbsolutePath() + "/", curProt, loadedProps.getProperty("INBOX_SERVER"), loadedProps.getProperty("INBOX_PORT"), loadedProps.getProperty("SMTP_SERVER"), loadedProps.getProperty("SMTP_PORT"), txtName.getText(), loadedProps.getProperty("MAIL_ADR"), loadedProps.getProperty("MAIL_PW"), cbCheckMailsAtProgramStart.isSelected());
                    loadedProps = cfg.loadConfig(dir.getAbsolutePath() + "/");
                }
                catch (Exception ex)
                {
                    Logger.getLogger(ManageEmails.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                //nein selektiert
            }
            cbCheckMailsAtProgramStart.setEnabled(false);
            btnEditCheckMailsAtProgramStart.setText("E");
        }
    }//GEN-LAST:event_btnEditCheckMailsAtProgramStartActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        JustMail.mainForm.newAddMailWindow();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnEditCheckMailsAtProgramStart;
    private javax.swing.JButton btnEditMail;
    private javax.swing.JButton btnEditName;
    private javax.swing.JButton btnEditPIPort;
    private javax.swing.JButton btnEditPIServer;
    private javax.swing.JButton btnEditProtocol;
    private javax.swing.JButton btnEditPw;
    private javax.swing.JButton btnEditSmtpPort;
    private javax.swing.JButton btnEditSmtpServer;
    private javax.swing.JButton btnRemoveEmail;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbCheckMailsAtProgramStart;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlTree;
    private javax.swing.JRadioButton rbImap;
    private javax.swing.JRadioButton rbPop;
    private javax.swing.JPanel tabMain;
    private javax.swing.JPanel tabPopImap;
    private javax.swing.JPanel tabSmtp;
    private javax.swing.JTextField txtMail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPortPI;
    private javax.swing.JPasswordField txtPw;
    private javax.swing.JTextField txtServerPI;
    private javax.swing.JTextField txtSmtpPort;
    private javax.swing.JTextField txtSmtpServer;
    // End of variables declaration//GEN-END:variables
}
